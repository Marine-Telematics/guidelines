"use strict";(self.webpackChunkguidelines=self.webpackChunkguidelines||[]).push([[251],{569:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"C++ Guidelines","href":"/guidelines/docs/cpp_guidelines","docId":"cpp_guidelines","unlisted":false},{"type":"category","label":"Header Files","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"#define guard","href":"/guidelines/docs/header_files/header_guards","docId":"header_files/header_guards","unlisted":false},{"type":"link","label":"Header File Dependencies","href":"/guidelines/docs/header_files/dependencies","docId":"header_files/dependencies","unlisted":false},{"type":"link","label":"Names and Order of Includes","href":"/guidelines/docs/header_files/naming_and_order","docId":"header_files/naming_and_order","unlisted":false}]},{"type":"category","label":"Structures and Classes","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Naming and declaration.","href":"/guidelines/docs/classes/naming_and_declaration","docId":"classes/naming_and_declaration","unlisted":false},{"type":"link","label":"Constructors","href":"/guidelines/docs/classes/constructors","docId":"classes/constructors","unlisted":false},{"type":"link","label":"Member declaration","href":"/guidelines/docs/classes/meber_declaration","docId":"classes/meber_declaration","unlisted":false}]},{"type":"category","label":"C/C++ features","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"References and Pointers","href":"/guidelines/docs/features/references","docId":"features/references","unlisted":false},{"type":"link","label":"Exceptions","href":"/guidelines/docs/features/exceptions","docId":"features/exceptions","unlisted":false},{"type":"link","label":"Dynamic memory allocation and heap usage","href":"/guidelines/docs/features/dyn_memory","docId":"features/dyn_memory","unlisted":false},{"type":"link","label":"Preprocessor usage","href":"/guidelines/docs/features/preprocessor","docId":"features/preprocessor","unlisted":false},{"type":"link","label":"Function/Method Annotations","href":"/guidelines/docs/features/annotations","docId":"features/annotations","unlisted":false}]},{"type":"category","label":"Naming and Style conventions","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Variable and constants naming","href":"/guidelines/docs/conventions/variables","docId":"conventions/variables","unlisted":false},{"type":"link","label":"Functions and Methods naming","href":"/guidelines/docs/conventions/functions","docId":"conventions/functions","unlisted":false},{"type":"link","label":"Braces(backets) scoping","href":"/guidelines/docs/conventions/braces","docId":"conventions/braces","unlisted":false},{"type":"link","label":"Constants and Variable Types","href":"/guidelines/docs/conventions/types","docId":"conventions/types","unlisted":false},{"type":"link","label":"Comments","href":"/guidelines/docs/conventions/comments","docId":"conventions/comments","unlisted":false},{"type":"link","label":"Usage of the LLVM Tools","href":"/guidelines/docs/conventions/clangd","docId":"conventions/clangd","unlisted":false}]}]},"docs":{"classes/constructors":{"id":"classes/constructors","title":"Constructors","description":"Initialization constructors:","sidebar":"tutorialSidebar"},"classes/meber_declaration":{"id":"classes/meber_declaration","title":"Member declaration","description":"Members should be declared in the order as follows:","sidebar":"tutorialSidebar"},"classes/naming_and_declaration":{"id":"classes/naming_and_declaration","title":"Naming and declaration.","description":"All classes and structures must be declared in a .h file and defined in a relative .cpp file, in the same directory and with the same name.","sidebar":"tutorialSidebar"},"conventions/braces":{"id":"conventions/braces","title":"Braces(backets) scoping","description":"Braces must always be placed in a new line. Braces on the same line as definitions are not the C++ standard.","sidebar":"tutorialSidebar"},"conventions/clangd":{"id":"conventions/clangd","title":"Usage of the LLVM Tools","description":"The LLVM has a set of tools that can help the developer staying in the provided standards.","sidebar":"tutorialSidebar"},"conventions/comments":{"id":"conventions/comments","title":"Comments","description":"The C++ offers 2 types of comments:","sidebar":"tutorialSidebar"},"conventions/functions":{"id":"conventions/functions","title":"Functions and Methods naming","description":"Functions and methods must be in camelBack.","sidebar":"tutorialSidebar"},"conventions/types":{"id":"conventions/types","title":"Constants and Variable Types","description":"We adopted a rule to always use explicit variable size. So the usage of int, unsigned int, long and short is not advised.","sidebar":"tutorialSidebar"},"conventions/variables":{"id":"conventions/variables","title":"Variable and constants naming","description":"- Variables, either being data members or not, must be in snake_case.","sidebar":"tutorialSidebar"},"cpp_guidelines":{"id":"cpp_guidelines","title":"C++ Guidelines","description":"","sidebar":"tutorialSidebar"},"features/annotations":{"id":"features/annotations","title":"Function/Method Annotations","description":"Functions and class methos should be annotated whenever needed.","sidebar":"tutorialSidebar"},"features/dyn_memory":{"id":"features/dyn_memory","title":"Dynamic memory allocation and heap usage","description":"Dynamic memory allocation, either by the C style malloc, or with the C++ new operator is discouraged.","sidebar":"tutorialSidebar"},"features/exceptions":{"id":"features/exceptions","title":"Exceptions","description":"Exceptions are not allowed.","sidebar":"tutorialSidebar"},"features/preprocessor":{"id":"features/preprocessor","title":"Preprocessor usage","description":"Usage of preprocessor macros should be avoided, the preprocessor is a inheritance from C, where the only \\"good\\" way for generic functions.","sidebar":"tutorialSidebar"},"features/references":{"id":"features/references","title":"References and Pointers","description":"We tend not to use pointers, instead, the recomendation is to use C++ references.","sidebar":"tutorialSidebar"},"header_files/dependencies":{"id":"header_files/dependencies","title":"Header File Dependencies","description":"Do not include other headers whenever a forward declaration would suffice.","sidebar":"tutorialSidebar"},"header_files/header_guards":{"id":"header_files/header_guards","title":"#define guard","description":"define guard","sidebar":"tutorialSidebar"},"header_files/naming_and_order":{"id":"header_files/naming_and_order","title":"Names and Order of Includes","description":"All of a project\'s header files should be listed as descendants of the project\'s source directory","sidebar":"tutorialSidebar"}}}}')}}]);