"use strict";(self.webpackChunkguidelines=self.webpackChunkguidelines||[]).push([[532],{2531:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var r=t(4848),a=t(8453);const s={sidebar_position:0},o="References and Pointers",i={id:"features/references",title:"References and Pointers",description:"We tend not to use pointers, instead, the recomendation is to use C++ references.",source:"@site/docs/features/references.md",sourceDirName:"features",slug:"/features/references",permalink:"/guidelines/docs/features/references",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"tutorialSidebar",previous:{title:"Member declaration",permalink:"/guidelines/docs/classes/meber_declaration"},next:{title:"Exceptions",permalink:"/guidelines/docs/features/exceptions"}},c={},d=[{value:"Example for a method receiving a pointer and a reference.",id:"example-for-a-method-receiving-a-pointer-and-a-reference",level:4}];function u(e){const n={code:"code",h1:"h1",h4:"h4",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"references-and-pointers",children:"References and Pointers"})}),"\n",(0,r.jsx)(n.p,{children:"We tend not to use pointers, instead, the recomendation is to use C++ references.\nPointers are a inheritance from C, the fact that C style pointer can be null and non constant is one of the major source\nof bugs in virtually any C and C++ project.\nIf the code allows, prefer to use references(&) instead of the C pointer(*)."}),"\n",(0,r.jsx)(n.p,{children:"If a reference its not possible to use a reference, a pointer is allowed but you need to manually check against null on its usage."}),"\n",(0,r.jsx)(n.h4,{id:"example-for-a-method-receiving-a-pointer-and-a-reference",children:"Example for a method receiving a pointer and a reference."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'struct Data\n{\n    uint32_t some_number;\n};\n\nvoid argumentByReference(const Data &data) // Prefered since its easy and safe to pass by reference.\n{\n    printf("data.some_number: %d\\n", data.some_number);\n}\n\nvoid argumentByPointer(const Data *data) // Discouraged.\n{\n    if(data == nullptr)\n    {\n        // Should somehow signal the callee or panic.\n        return;\n    }\n\n    printf("data.some_number: %d\\n", data->some_number);\n}\n'})})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var r=t(6540);const a={},s=r.createContext(a);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);