"use strict";(self.webpackChunkguidelines=self.webpackChunkguidelines||[]).push([[996],{9003:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>d});var o=t(4848),s=t(8453);const r={sidebar_position:4},i="Function/Method Annotations",a={id:"features/annotations",title:"Function/Method Annotations",description:"Functions and class methos should be annotated whenever needed.",source:"@site/docs/features/annotations.md",sourceDirName:"features",slug:"/features/annotations",permalink:"/guidelines/docs/features/annotations",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Preprocessor usage",permalink:"/guidelines/docs/features/preprocessor"},next:{title:"Variable and constants naming",permalink:"/guidelines/docs/conventions/variables"}},c={},d=[{value:"Example for a class <code>Foo</code>:",id:"example-for-a-class-foo",level:4}];function l(e){const n={code:"code",h1:"h1",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"functionmethod-annotations",children:"Function/Method Annotations"})}),"\n",(0,o.jsx)(n.p,{children:"Functions and class methos should be annotated whenever needed."}),"\n",(0,o.jsx)(n.p,{children:"Some of those annotations include:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"[[noreturn]] Whenever the method is intended to enter a infinite loop."}),"\n",(0,o.jsx)(n.li,{children:"[[nodiscard]] Whenever the return value is intended to be checked."}),"\n",(0,o.jsx)(n.li,{children:"const Whenever the function does not change the object`s state."}),"\n"]}),"\n",(0,o.jsxs)(n.h4,{id:"example-for-a-class-foo",children:["Example for a class ",(0,o.jsx)(n.code,{children:"Foo"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:"\n[[noreturn]] void Foo::infiniteLoop()\n{\n    for(;;)\n    {\n        // Do something.\n    }\n}\n\n[[nodiscard]] Error Foo::mightError()\n{\n    ...\n\n    if(did_fatal_error)\n    {\n        return Error::Fatal;\n    }\n\n    ...\n}\n\nState Foo::getState() const // Does not change the Foo state.\n{\n    return this->state;\n}\n\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var o=t(6540);const s={},r=o.createContext(s);function i(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);