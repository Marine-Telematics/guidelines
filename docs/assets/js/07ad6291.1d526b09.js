"use strict";(self.webpackChunkguidelines=self.webpackChunkguidelines||[]).push([[833],{4927:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>l});var s=t(4848),a=t(8453);const i={sidebar_position:0},o="Variable and constants naming",r={id:"conventions/variables",title:"Variable and constants naming",description:"- Variables, either being data members or not, must be in snake_case.",source:"@site/docs/conventions/variables.md",sourceDirName:"conventions",slug:"/conventions/variables",permalink:"/guidelines/docs/conventions/variables",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"tutorialSidebar",previous:{title:"Function/Method Annotations",permalink:"/guidelines/docs/features/annotations"},next:{title:"Functions and Methods naming",permalink:"/guidelines/docs/conventions/functions"}},c={},l=[{value:"Example of usage:",id:"example-of-usage",level:4}];function d(n){const e={code:"code",h1:"h1",h4:"h4",header:"header",li:"li",pre:"pre",ul:"ul",...(0,a.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"variable-and-constants-naming",children:"Variable and constants naming"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["Variables, either being data members or not, must be in ",(0,s.jsx)(e.code,{children:"snake_case"}),"."]}),"\n",(0,s.jsxs)(e.li,{children:["Constants, if calculated using variable data should be ",(0,s.jsx)(e.code,{children:"snake_case"}),"."]}),"\n",(0,s.jsxs)(e.li,{children:["Constants, if they do not use any variable data, it should be a ",(0,s.jsx)(e.code,{children:"constexpr"}),"."]}),"\n",(0,s.jsxs)(e.li,{children:["Constant Expressions, must be in ",(0,s.jsx)(e.code,{children:"UPPER_CASE"}),"."]}),"\n"]}),"\n",(0,s.jsx)(e.h4,{id:"example-of-usage",children:"Example of usage:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:"class Foo\n{\n    constexpr size_t DATA_SIZE = 5;\n    constexpr std::array<DataType, DATA_SIZE> IMMUTABLE_ARRAY{};\n\n    std::array<DataType, DATA_SIZE> variable_array{};\n\n    uint32_t variable_data_member{0};\n\n    uint32_t doSomething(uint16_t var) const;\n};\n\nuint32_t Foo::doSomething(const uint16_t var) const\n{\n    const uint32_t const_from_mutable =\n        this->variable_data_member + var;\n\n    return const_from_mutable;\n}\n\n"})})]})}function u(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>o,x:()=>r});var s=t(6540);const a={},i=s.createContext(a);function o(n){const e=s.useContext(i);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:o(n.components),s.createElement(i.Provider,{value:e},n.children)}}}]);