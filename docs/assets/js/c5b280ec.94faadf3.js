"use strict";(self.webpackChunkguidelines=self.webpackChunkguidelines||[]).push([[811],{5502:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var o=t(4848),s=t(8453);const i={sidebar_position:4},r="Comments",a={id:"conventions/comments",title:"Comments",description:"The C++ offers 2 types of comments:",source:"@site/docs/conventions/comments.md",sourceDirName:"conventions",slug:"/conventions/comments",permalink:"/guidelines/docs/conventions/comments",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Constants and Variable Types",permalink:"/guidelines/docs/conventions/types"},next:{title:"Usage of the LLVM Tools",permalink:"/guidelines/docs/conventions/clangd"}},c={},l=[{value:"The standard way to comment in our projects is:",id:"the-standard-way-to-comment-in-our-projects-is",level:5},{value:"Example containing all the comments:",id:"example-containing-all-the-comments",level:4}];function d(e){const n={code:"code",h1:"h1",h4:"h4",h5:"h5",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"comments",children:"Comments"})}),"\n",(0,o.jsx)(n.p,{children:"The C++ offers 2 types of comments:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"double slash(//) The standard C++ way for comments."}),"\n",(0,o.jsx)(n.li,{children:"slash-asterisk(/**/) Inherited from C."}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"The slash-asterisk(/**/) type of comments are not advised since those cannot be nested in C++.\nLet`s say for example, you have a function that has a comment with /**/ inside. If you comment the entire function, the compiler will throw an error because /**/ cant be inside another /**/ block."}),"\n",(0,o.jsx)(n.h5,{id:"the-standard-way-to-comment-in-our-projects-is",children:"The standard way to comment in our projects is:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"double slash(//) For comments in general, explanations, TODOS and etc."}),"\n",(0,o.jsx)(n.li,{children:"triple slash(///) For function documentation."}),"\n",(0,o.jsx)(n.li,{children:"triple slash(///) For doxygen headers."}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"example-containing-all-the-comments",children:"Example containing all the comments:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:'///-----------------------------------------------------------------------------\n/// PROJECT_NAME : MODULE_NAME - (c) YEAR Marine Telematics\n///-----------------------------------------------------------------------------\n///\n/// @file filename.ext\n/// @author Author Name (author@email.com)\n/// @date yyyy-mm-dd\n///\n/// Short description about the module.\n///\n///-----------------------------------------------------------------------------\n\n#include "core/foo.h"\n\n// Loop frequency in Hertz\nconstexpr f32 FREQUENCY = 50; // [Hz]\n\n/// @brief This is a doxygen description, must be short but comprehensive.\n///\n/// @param mutable_var Reference to something, its use must be described here.\n///\n/// @retuns Description of its return value.\ni32 Foo::doSomething(MutableType &mutable_var) const\n{\n    // Period of a pure function is 1 over its frequency. ie.: P = 1/f\n    constexpr f32 PERIOD_MS = (1 / FREQUENCY) * 1000;\n    constexpr i32 DELAY_TIME = (i32)PERIOD_MS;\n\n\n    // TODO: Find a way to store `mutable_var` so we dont need to pass it here.\n    this->someOtherStuff(mutable_var);\n\n    const i32 now = functionThatKnowsTheTime();\n    const i32 delay_until = now + DELAY_TIME;\n\n    delayUntil(delay_until);\n}\n\n'})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var o=t(6540);const s={},i=o.createContext(s);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);